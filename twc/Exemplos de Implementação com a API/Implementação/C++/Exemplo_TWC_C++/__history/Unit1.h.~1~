//---------------------------------------------------------------------------

#ifndef Unit1H
#define Unit1H
//---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <Vcl.Controls.hpp>
#include <Vcl.StdCtrls.hpp>
#include <Vcl.Forms.hpp>
#include <Vcl.Grids.hpp>
#include "TCPIP.h"
#include <Vcl.ExtCtrls.hpp>
#include <Data.DB.hpp>
#include <Vcl.DBCtrls.hpp>
#include <Vcl.Mask.hpp>
#include <Vcl.DBGrids.hpp>
#include <queue>
#include "Unit2.h"


#define VERSAO "2.0                 "
#define IP "192.168.0.77"

#define TOUTRX 50
#define TOUTTX 3
#define MAXERROR 10

#define TMAX 50
#define CMAX 200

#define LEN_CODCARD 16
#define MAX_LEN_NAME 45

#define TX 0
#define RX 1


#define ADMIN "A"

	typedef enum
	{
		CONNECT,
		RECONNECT,
		DISCONNECT,
		WAIT,
	}CONNECTION;

	typedef enum
	{
		STATE,
		LOOP,
	}TERMINAL;

	typedef enum
	{
		STX,
		INIT,
		GET_LEN,
		GET_DATA,
		GET_CHECK,
	}PROT_HRS;

	typedef enum
	{
		STATUS,
		PENDENCY,
		READ_VERSION,
		WRITE_VERSION,
		WRITE_MEN1,
		WRITE_MEN2,
		WRITE_MEN3,
		WRITE_MEN4,
		WRITE_TELA,
		CHECKED,
		CANCELED,
		CLEAN,
		ADMIN_LOG,
		ADMIN_N_LOG,
		WRITE_LOGIN,
		GET_CARD,
		N_LOG_OUT,
		LOG_OUT,
		WRITE_COD,
		WRITE_INIT,
		WRITE_FINISH,
		ERROR_INIT,
		ERROR_FINISH,
		RERUN1,
		ERROR_INIT_IS_BUSY,
		N_LOG_OFF,
	}CMDS_SM;


using namespace std;
//---------------------------------------------------------------------------
typedef struct _PROT_ANALIZER_
{
	int Data_Count;
	AnsiString Ck;
	BYTE Ck_Count;
	char Ck_Acc[2];
	BYTE Sm;
	BYTE Len_Count;
	char Len_Acc[4];
	char Len_Aux[2];
	int Len;
	BYTE Checksum;
}_tPROT;

extern _tPROT Prot;
//---------------------------------------------------------------------------
class Terminal
{
	public:
		Terminal(void);
		void Task(void);
		bool Close(void);
		int Num;
		int List[99];
		int idx;
		BYTE Sm_Task;
		int Cont;
		bool is_closing;
};
//---------------------------------------------------------------------------
class BASE
{
		int Qtd_Colabs;
		int Qtd_Event;
	public:
	   typedef struct
	   {
			String idx;
			String Nome;
			String Nivel;
			String CodCartao;
	   }Dados_Colab;

	   TClientDataSet* Register_Colab;
	   TSQLQuery* Colab_Query;

	   TClientDataSet* Event_Set;
	   TSQLQuery* Event_Query;

	   bool Cad_is_Valid (void);
	   void List_Colabs(void);
	   int Get_qtd_Colabs(void);
	   int Search_Colab(String Column,String Value);
	   void Create_Table(void);
	   void List_Events(void);
	   void Write_Table(String nome,String it,int qtd, String op, bool *init, int *sm);
	   Dados_Colab* Get_Colab (int idx);

};
//---------------------------------------------------------------------------
class Cmd
{
		int Tx_Push;
		int Tx_Pop;
		BYTE Tx_Checksum;
		char Buff_Tx[200];
		int sm_task;
		int sm_state;
		int sm_back;
		String Dados;
		bool Pckg_Ok;
		bool Pendency;
		bool Checked;
		bool is_asking;
		int Error;
		String Cod_Read;
		bool Is_busy;
		bool login_ongoing;
		BASE::Dados_Colab* User;
		struct
		{
			String It;
			String Op;
		}Before_Rec;
	public:
		Cmd(void);
		void AutPutBegin(void);
		void AutPut(String str);
		void AutPutFlush(void);
		void AutPutStr (String str);
		void Task (void);
		void Loop (void);
		String Parser(char *p, int len);
		void Parser_Term (String str);
		int Send_Status (void);
		void Send_Pendency (void);
		void Read_Version (void);
		void Write_Men1 (void);
		void Write_Men2 (void);
		void Write_Men3 (void);
		void Write_Men4 (void);
		int Extract_Term(String str);
		void Write_Version(void);
		void Write_Tela (void);
		void Write_Welcome (void);
		void Write_Cancel(void);
		void Write_Clean(void);
		void Write_Txt (String str,BYTE next_step);
		void Write_Login (void);
		void Write_GetCard (void);
		void Write_LogOut (void);
		void Clean_Canvas (bool *flag);
		BASE::Dados_Colab* Get_user (int idx);
};
//---------------------------------------------------------------------------
class Str
{
	private:
		String Txt;
		//int Valor;
		//float Val;
	public:
		Str(String);
	   //	Str(int);
		//Str(float);
		//float ToFloat (void);
		//String ToString(void);
		String Ajuste_Len (char ch ,char side, int new_len);
		//String Value (void);
		//int Len(void);
};
//---------------------------------------------------------------------------
class Tick
{
	public:
		Tick(void);
		bool TickCompare (int val);
		int GetTick (void);
		int Count;
};

//---------------------------------------------------------------------------
class TCP : public TCP_COM
{
	BYTE Sm;
	public:
		bool Recept;
		TCP (void);
		void Task(void);
		void Verify_Error(void);
		Tick Tout;
		int Tx;
		int Rx;
		int Rx_Push;
		char Buff_Rx[200];
};
//---------------------------------------------------------------------------
class Grid
{
	public:
		Grid(void);
		bool Paused;
		int Line;
		TStringGrid *Grade;
};
//---------------------------------------------------------------------------
class Connection : TCP
{
	private:
		TComboBox *Ip;
		TComboBox *Port;
		TButton *Connect_b;

		int Line_term;
		bool is_Connected;
		bool Reconnecting;
		TIMEVAL Time;

	public:

		Grid Term;
		BYTE Sm;
		BYTE Sm_Task;
		void Write_term(String idx,String Cmd, String Cmd1, String Cmd2,String Cmd3);
		Connection (void);
		void ConnectClick (TObject *Sender);
		void Task (void);
		void Inc_Port (void);
		bool Connected (void);

};
//---------------------------------------------------------------------------
class TForm1 : public TForm
{
__published:	// IDE-managed Components
	TComboBox *ComboBox1;
	TButton *Button1;
	TStringGrid *StringGrid1;
	TComboBox *ComboBox2;
	TTimer *T_Task;
	TDataSource *DataSource1;
	TGroupBox *GroupBox1;
	TLabel *Label5;
	TButton *Button3;
	TLabeledEdit *L_Cad_CodCartao;
	TLabeledEdit *L_Cad_Nome;
	TComboBox *C_Cad_Nivel;
	TStringGrid *S_Cad_Colabs;
	TGroupBox *GroupBox2;
	TStringGrid *S_Events;
	void __fastcall Button1Click(TObject *Sender);
	void __fastcall FormCreate(TObject *Sender);
	void __fastcall T_TaskTimer(TObject *Sender);
	void __fastcall Button3Click(TObject *Sender);
	void __fastcall FormShow(TObject *Sender);
	void __fastcall FormClose(TObject *Sender, TCloseAction &Action);
	void __fastcall S_Cad_ColabsKeyDown(TObject *Sender, WORD &Key, TShiftState Shift);
	void __fastcall Button2Click(TObject *Sender);
	void __fastcall Button4Click(TObject *Sender);
	void __fastcall FormCloseQuery(TObject *Sender, bool &CanClose);
private:	// User declarations
public:		// User declarations
	__fastcall TForm1(TComponent* Owner);
};
//---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
//---------------------------------------------------------------------------
#endif
